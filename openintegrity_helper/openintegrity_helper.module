<?php
// $Id$

/**
 * @file
 * A module exemplifying Drupal coding practices and APIs.
 *
 * This module provides a block that lists all of the
 * installed modules. It illustrates coding standards,
 * practices, and API use for Drupal 7.
 */

/**
 * Implements hook_help().
 */
function openintegrity_helper_help($path, $arg) {
  if ($path == 'admin/help#openintegrity_helper') {
    return t('A helper module for Open Integrity Index.');
  }
}

function openintegrity_helper_locale($op = 'groups') {
  switch ($op) {
    case 'groups':
      return array('openintegrity' => t('Open Integrity'));
  }
}

function openintegrity_helper_form_alter(&$form, &$form_state, $form_id) {
  $form['#attributes']['class'] = 'container';
  switch($form_id) {
    case 'views_exposed_form':
      if($form_state['view']->name == 'browse') {
        $form['field_entry_category']['#options']['All'] = t('I want to...'); // overrides <All> on the dropdown
        $form['field_entry_type']['#options']['All'] = t('Using...'); // overrides <All> on the dropdown
      }
    break;
  }
}

function openintegrity_helper_form_entry_node_form_alter(&$form, &$form_state, $form_id) {
  unset($form['field_entry_score']);
  // JUN: Changing the title of the buttons on the inline_entity_form (https://drupal.org/node/1880850#comment-6936976)
  $form['field_entry_developer']['und']['actions']['ief_add']['#value'] = t('Add Developer');
  $form['field_entry_developer']['und']['actions']['ief_add_existing']['#value'] = t('Search for a Developer');
  $form['field_entry_developer']['und']['form']['entity_id']['#title'] = t('Developer');
  $form['field_entry_developer']['und']['form']['actions']['ief_reference_save']['#value'] = t('Select Developer');
  $form['field_entry_developer']['und']['form']['#title'] = t('Add Developer');
  $form['field_entry_developer']['und']['form']['actions']['ief_add_save']['#value'] = t('Save Developer');
//  $form['additional_settings']['#access'] = 0;
}

function openintegrity_helper_form_evidence_node_form_alter(&$form, &$form_state, $form_id) {
//  $form['field_evidence_date']['und']['#access'] = 0;

  if (!(strpos($form['#action'],'node/add/evidence') || strpos($form['#action'],'/edit'))) {
    $form['#prefix'] = '<div class="entry-form-links"><div class="submit-evidence">Submit evidence to support/contradict this claim<span class="submit-bubble"></span></div><a href="#" class="share-claim">Share this claim</a></div>';
  }

/*
  unset($form['menu']);
  unset($form['options']);
  unset($form['revision_information']);
  unset($form['comment_settings']);
  unset($form['author']);
  $form['#after_build'][] = 'openintegrity_helper_after_build';
  $form['actions']['submit']['#value'] = t('Submit Evidence');

 *
 * Removing Ajax for now.
 *
  $form['#validate'] = array();
  $form['actions']['submit']['#submit'] = array();
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit Evidence'),
    '#ajax' => array(
        'callback' => 'openintegrity_helper_forms_ajax_callback',
    ),
  );
*/
}

/*
function openintegrity_helper_after_build ($form, &$form_state) {
  $form['path']['#access'] = false;
  return $form;
}
*/

/*
function openintegrity_helper_forms_ajax_callback($form, &$form_state){
  module_load_include('inc', 'node', 'node.pages');
  node_form_validate($form, $form_state);

  if (!form_get_errors()) {
    node_form_submit($form, $form_state);
  }

  $claimid = $form_state['input']['field_evidence_claim_id'];
  // Get view's content
  $content = views_embed_view('entry_evidence', 'default', $claimid);

  //watchdog('oii',$content);
  
  $commands = array(
    ajax_command_replace('.view-evidence-claim-' . $claimid, $content),
  );

  return array('#type' => 'ajax', '#commands' => $commands);
}
*/

function openintegrity_helper_form_user_register_form_alter(&$form, &$form_state) {
   $form['introtext'] = array(
     '#type' => 'item',
     '#markup' => 'Register with the Open Integrity Index with the <strong>role that describes you best</strong>:<br/><br/><ul><li>Create a <a href="/user/register">community account</a> if you want to inform yourself or submit evidence on the tools that matter to you.</li><li>Create a <a href="/developer/register">developer account</a> if you are a tool developer</li><li>Create a <a href="/peer-reviewer/register">peer-reviewer account</a> if you would like to register as a peer-reviewer</li><li>Create a <a href="/partner/register">partner account</a> if you would like to use the Open Integrity Index API and use the badge on your website</li></ul><br/>',
     '#weight' => -10, // Adjust so that you can place it whereever 
   );
  $form['account']['mail']['#weight']=-1;
  $form['account']['mail_confirm'] = array(
    '#type' => 'textfield',
    '#title' => t('Confirm e-mail address'),
    '#maxlength' => EMAIL_MAX_LENGTH,
    '#description' => t('Please confirm your e-mail address.'),
    '#required' => TRUE,
    '#weight' => 0,
  );
  $form['#validate'][] = 'openintegrity_user_register_form_validate';
}

function openintegrity_helper_form_profile2_edit_developer_form_alter(&$form, &$form_state) {
// JUN: Changing the title of the buttons on the inline_entity_form (https://drupal.org/node/1880850#comment-6936976)

   $form['introtext'] = array(
     '#type' => 'item',
     '#markup' => 'Register with the Open Integrity Index with the <strong>role that describes you best</strong>:<br/><br/><ul><li>Create a <a href="/user/register">community account</a> if you want to inform yourself or submit evidence on the tools that matter to you.</li><li>Create a <a href="/developer/register">developer account</a> if you are a tool developer</li><li>Create a <a href="/peer-reviewer/register">peer-reviewer account</a> if you would like to register as a peer-reviewer</li><li>Create a <a href="/partner/register">partner account</a> if you would like to use the Open Integrity Index API and use the badge on your website</li></ul><br/>',
     '#weight' => -10, // Adjust so that you can place it whereever 
   );
 
   switch ($form['#action']) {
     case '/en/developer/register':
      $form['profile_developer']['field_tool'][LANGUAGE_NONE]['actions']['ief_add']['#value'] = t('Submit a new Tool');
      $form['profile_developer']['field_tool'][LANGUAGE_NONE]['#description'] = t('Search for tools that you have develop to claim them. After you register you will be able to submit a new tool.<br/><br/>');
      $form['profile_developer']['field_tool'][LANGUAGE_NONE]['actions']['ief_add_existing']['#value'] = t('Search for a Tool');
      $form['profile_developer']['field_tool'][LANGUAGE_NONE]['form']['entity_id']['#title'] = t('Tool name');
      $form['profile_developer']['field_tool'][LANGUAGE_NONE]['form']['actions']['ief_reference_save']['#value'] = t('Select Tool');
      $form['profile_developer']['field_tool'][LANGUAGE_NONE]['form']['#title'] = t('Add your Tool');
      $form['profile_developer']['field_tool'][LANGUAGE_NONE]['form']['actions']['ief_add_save']['#value'] = t('Save your Tool');
      $form['profile_developer']['field_entry_developer'][LANGUAGE_NONE]['actions']['ief_add']['#value'] = t('Submit a new Organisation');
      $form['profile_developer']['field_entry_developer'][LANGUAGE_NONE]['#description'] = t('Search for a developer organisation to join it. After you register you will be able to submit a new organisation.<br/><br/>');
      $form['profile_developer']['field_entry_developer'][LANGUAGE_NONE]['actions']['ief_add_existing']['#value'] = t('Search for an Organisation');
      $form['profile_developer']['field_entry_developer'][LANGUAGE_NONE]['form']['entity_id']['#title'] = t('Organisation name');
      $form['profile_developer']['field_entry_developer'][LANGUAGE_NONE]['form']['actions']['ief_reference_save']['#value'] = t('Select Organisation');
      $form['profile_developer']['field_entry_developer'][LANGUAGE_NONE]['form']['#title'] = t('Add your Organisation');
      $form['profile_developer']['field_entry_developer'][LANGUAGE_NONE]['form']['actions']['ief_add_save']['#value'] = t('Save your Organisation');
      break;
      break;
  }
}

function openintegrity_helper_views_pre_view(&$view, &$display_id, &$args) {
  if($view->name == "entry_evidence") {
//    $view->display_handler->set_option('css_class', 'view-evidence-claim-' . $view->args[0]);

    global $user;
    module_load_include('inc', 'node', 'node.pages');
    $node = (object) array('uid' => $user->uid, 'name' => (isset($user->name) ? $user->name : ''), 'type' => 'evidence', 'language' => LANGUAGE_NONE);
    $form = drupal_get_form('evidence_node_form',$node);
    $claim = node_load($view->args[0]);
    $subindex = node_load($claim->field_claim_subindex['und'][0]['target_id']);
    $index = node_load($subindex->field_subindex_index['und'][0]['target_id']);
    $entry = node_load($index->field_index_entry['und'][0]['target_id']);
    $form['field_evidence_claim']['und'][0]['target_id']['#value']=$entry->title . ' - ' . $claim->title . ' (' . $view->args[0] . ')';
    $form['field_evidence_claim_id']=array(
      '#type' => 'hidden',
      '#name' => 'field_evidence_claim_id',
      '#value' => $view->args[0],
    );
    $form['#action'] .= "#claim-" . $view->args[0];
    $form['field_evidence_claim']['#type'] = 'hidden';
    $form['field_evidence_claim']['#attributes']['style'][] = 'display:none;';

    $output = drupal_render($form);

    $options = array(
      'id' => 'area',
      'table' => 'views',
      'field' => 'area',
      'empty' => TRUE,
      'content' => $output,
      'format' => 'full_html',
      'tokenize' => 0,
    );
    $view->set_item($display_id, 'footer', 'area', $options);
  }
}

function openintegrity_helper_node_presave($node) {
  if (!empty($node->nid)) {
    $status_before = db_query("SELECT status FROM {node} WHERE nid = :nid", array(':nid' => $node->nid))->fetchObject();
    if ($node->status == 0 && $status_before->status == 1) {
      $node->revision_moderation = FALSE;
    }
  }
}

/**
 * Implements hook_menu().
 * Note: You can define your own menu callback optionally.
 */
function openintegrity_helper_menu() {
  $items['openintegrity-signup'] = array(
    'title' => 'Create new account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_register_form'),
    'access callback' => 'user_register_access',
    'type' => MENU_CALLBACK,
  );
  return $items;
}
/**
 * Implements hook_form_FORM_ID_alter().
 *
function openintegrity_helper_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $form['account']['mail_confirm'] = array(
    '#type' => 'textfield',
    '#title' => t('Confirm e-mail address'),
    '#maxlength' => EMAIL_MAX_LENGTH,
    '#description' => t('Please confirm your e-mail address.'),
    '#required' => TRUE,
  );
  $form['#validate'][] = 'foo_user_register_form_validate';
}
**
 * Implements validation callback.
 */
function openintegrity_helper_user_register_form_validate(&$form, &$form_state) {
  if ($form_state['values']['mail'] != $form_state['values']['mail_confirm']) {
    form_set_error('mail_confirm', 'The email addresses must match.');
  }
}
